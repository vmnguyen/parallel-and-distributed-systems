#include <stdio.h>
#include "mpi.h"

#define NELTS 50000
#define MASTER 0
#define FROM_MASTER 1
#define FROM_WORKER 2

MPI_Status status;

int main(int argc, char **argv) {

   double v[NELTS],
   sum,
   ptSum;
   int size,
   numWorkers,
    rank,
    source,
    dest,
    mtype,
   aveSz,
   extra,
   offset,
    i,
   count;


 MPI_Init(&argc, &argv);
 MPI_Comm_rank(MPI_COMM_WORLD, &rank);
 MPI_Comm_size(MPI_COMM_WORLD, &size);

 numWorkers = size-1;


 if (rank == MASTER) {

  for (i=0; i<NELTS; i++)
   v[i]= 1;


  aveSz = NELTS/numWorkers;
  extra = NELTS%numWorkers;
  offset = 0;
  mtype = FROM_MASTER;
  for (dest=1; dest<=numWorkers; dest++) {
      count = (dest <= extra) ? aveSz+1 : aveSz;
      MPI_Send(&count,1,MPI_INT,dest,mtype, MPI_COMM_WORLD);
      MPI_Send(&v[offset],count,MPI_DOUBLE,dest,mtype,MPI_COMM_WORLD);
      printf("Master sent elements %d to %d to rank %d.\n",
 offset,offset+count,dest);
      offset+=count;
  }


  sum=0;
  mtype = FROM_WORKER;
  for (i=1; i<=numWorkers; i++) {
   source = i;
   MPI_Recv(&ptSum,1,MPI_DOUBLE,source,mtype,MPI_COMM_WORLD, &status);
   sum+=ptSum;
  }
  printf("Vector sum is %lf.\n", sum);
 }



  if (rank > MASTER) {

  mtype = FROM_MASTER;
  source = MASTER;
  MPI_Recv(&count,1,MPI_INT,source,mtype,MPI_COMM_WORLD,&status);
  MPI_Recv(&v,count,MPI_DOUBLE,source,mtype,MPI_COMM_WORLD,&status);


  sum=0;
  for (i=0;i<count;i++)
   sum+=v[i];

      printf("Slave %d is sending partial sum %lf to master.\n",rank,sum);

  mtype = FROM_WORKER;
  MPI_Send(&sum,1,MPI_DOUBLE,MASTER,mtype,MPI_COMM_WORLD);
 }

   MPI_Finalize();
   return 0;
}

